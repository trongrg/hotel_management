require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HotelsController do
  context "with signed in user" do
    shared_examples_for "not authorized" do
      it "redirects to dashboard page" do
        response.should redirect_to dashboard_path
        flash[:alert].should == "You are not authorized to access this page."
      end
    end
    let(:owner) { User.make!(:hotel_owner) }
    before do
      @hotel = Hotel.make!(:owner => owner)
      sign_in owner
    end

    # This should return the minimal set of attributes required to create a valid
    # Hotel. As you add validations to Hotel, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      {:name => "Hotel name", :phone_number => "0987654321", :lat => 10, :lng => 10}
    end

    describe "GET index" do
      it "returns http success" do
        get :index, :user_id => owner.id
        response.should be_success
      end

      it "assigns all owner's hotels as @hotels" do
        hotel = Hotel.make!
        get :index, {:user_id => owner.id}
        assigns(:hotels).should eq([@hotel])
      end
    end

    describe "GET show" do
      context "of his/her hotel" do
        it "assigns the requested hotel as @hotel" do
          get :show, {:id => @hotel.to_param, :user_id => owner.id}
          assigns(:hotel).should eq(@hotel)
        end
      end

      context "of other user's hotel" do
        before do
          hotel = Hotel.make!
          get :show, {:id => hotel.to_param, :user_id => owner.id}
        end

        it_should_behave_like "not authorized"
      end
    end

    describe "GET new" do
      it "assigns a new hotel as @hotel" do
        get :new, {:user_id => owner.to_param}
        assigns(:hotel).should be_a_new(Hotel)
      end
    end

    describe "GET edit" do
      context "of his/her hotel" do
        it "assigns the requested hotel as @hotel" do
          get :edit, {:id => @hotel.to_param, :user_id => owner.to_param}
          assigns(:hotel).should eq(@hotel)
        end
      end

      context "of other user's hotel" do
        before do
          hotel = Hotel.make!
          get :edit, {:id => hotel.to_param, :user_id => owner.to_param}
        end

        it_should_behave_like "not authorized"
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Hotel" do
          expect {
            post :create, {:hotel => valid_attributes, :user_id => owner.to_param}
          }.to change(Hotel, :count).by(1)
        end

        it "assigns a newly created hotel as @hotel" do
          post :create, {:hotel => valid_attributes, :user_id => owner.to_param}
          assigns(:hotel).should be_a(Hotel)
          assigns(:hotel).should be_persisted
        end

        it "redirects to the created hotel" do
          post :create, {:hotel => valid_attributes, :user_id => owner.to_param}
          response.should redirect_to(user_hotel_path(owner, Hotel.last))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved hotel as @hotel" do
          # Trigger the behavior that occurs when invalid params are submitted
          Hotel.any_instance.stub(:save).and_return(false)
          post :create, {:hotel => {}, :user_id => owner.to_param}
          assigns(:hotel).should be_a_new(Hotel)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Hotel.any_instance.stub(:save).and_return(false)
          post :create, {:hotel => {}, :user_id => owner.to_param}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      context "of his/her hotel" do
      describe "with valid params" do
        it "updates the requested hotel" do
          # Assuming there are no other hotels in the database, this
          # specifies that the Hotel created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Hotel.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => @hotel.to_param, :hotel => {'these' => 'params'}, :user_id => owner.to_param}
        end

        it "assigns the requested hotel as @hotel" do
          put :update, {:id => @hotel.to_param, :hotel => valid_attributes, :user_id => owner.to_param}
          assigns(:hotel).should eq(@hotel)
        end

        it "redirects to the hotel" do
          put :update, {:id => @hotel.to_param, :hotel => valid_attributes, :user_id => owner.to_param}
          response.should redirect_to(user_hotel_path(owner, @hotel))
        end
      end

      describe "with invalid params" do
        it "assigns the hotel as @hotel" do
          hotel = Hotel.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Hotel.any_instance.stub(:save).and_return(false)
          put :update, {:id => hotel.to_param, :hotel => {}, :user_id => owner.to_param}
          assigns(:hotel).should eq(hotel)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Hotel.any_instance.stub(:save).and_return(false)
          put :update, {:id => @hotel.to_param, :hotel => {}, :user_id => owner.to_param}
          response.should render_template("edit")
        end
      end
      end

      context "of other user's hotel" do
        before do
          hotel = Hotel.make!
          put :update, {:id => hotel.to_param, :user_id => owner.to_param, :hotel => {}}
        end

        it_should_behave_like "not authorized"
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested hotel" do
        expect {
          delete :destroy, {:id => @hotel.to_param, :user_id => owner.to_param}
        }.to change(Hotel, :count).by(-1)
      end

      it "redirects to the hotels list" do
        delete :destroy, {:id => @hotel.to_param, :user_id => owner.to_param}
        response.should redirect_to(user_hotels_url(owner))
      end
    end

  end
end
